@Log4j2
public class DbSteps {
    @Step("Получаем данные заявки по номеру {number}")
    public DTOCarLoanApplicationDate fetchApplicationData(String number) {
        String query = DTOCarLoanApplicationDate.buildQuery(number);
        Map<String, String> results = null; //Инициализируем как null
        results = dbClient.executeQuerySingleResult(query);
        if (results == null) {
            log.info("Запрос вернул null для номера заявки: {}", number);
            fail("Не удалось получить данные для номера заявки: " + number);
        }
        log.info("Данные заявки успешно получены для номера: {}", number);
        return DTOCarLoanApplicationDate.convertMapToDTO(results);
    }

    @Step("Проверяем наличие заявки в БД таблица application для номера: {number}")
    public void assertApplicationExists(String number) {
        String query = "SELECT COUNT(*) AS count FROM public.application WHERE \"number\" = '" + number + "';";
        Map<String, String> result = dbClient.executeQuerySingleResult(query);
        if (result == null || Integer.parseInt(result.get("count")) == 0) {
            fail("Не удалось получить данные для номера заявки: " + number);
        }
    }

    @Step("Удаляем заявку в БД для номера: {number}")
    public void deleteApplicationInBd(String number, DTOCarLoanApplicationDate DTOCarLoanApplicationDate) {
        assertApplicationExists(number); // Проверка наличия заявки
        dbClient.executeQueryInsertUpdate("DELETE FROM public.application WHERE \"number\" = '" + DTOCarLoanApplicationDate.getNumber() + "';");
        dbClient.executeQueryInsertUpdate("DELETE FROM public.applications_audit WHERE application_number = '" + DTOCarLoanApplicationDate.getNumber() + "';");
        dbClient.executeQueryInsertUpdate("DELETE FROM public.ubl_result WHERE application_number = '" + DTOCarLoanApplicationDate.getNumber() + "';");
        dbClient.executeQueryInsertUpdate("DELETE FROM public.scoring_decision WHERE application_id = '" + DTOCarLoanApplicationDate.getId() + "';");
        log.info("Удалили строку из таблицы public.scoring_decision");
        dbClient.executeQueryInsertUpdate("DELETE FROM public.scoring_command_manager WHERE application_id = '" + DTOCarLoanApplicationDate.getId() + "';");
        log.info("Удалили строку из таблицы public.scoring_command_manager");
        log.info("Удалили заявку номер {} из БД", number);
    }

    @Step("Получить название дилера из БД для номера заявки: {number}")
    public String getDealerNameByApplicationNumber(String number) {
        Map<String, String> dealerInfo = dbClient.executeQuerySingleResult("SELECT d.name FROM application a JOIN division d ON a.division_id = d.id WHERE a.number = '" + number + "';");
        String dealerName = dealerInfo.values().iterator().next();
        log.info("Получили название дилерского центра : {}", dealerName);
        return dealerName;
    }

    @Step("Получить адресные данные из БД для номера заявки: {numberApplication}")
    public String getAddressDataByApplicationNumber(String numberApplication, String type, String column) {
        Map<String, String> addressData = dbClient.executeQuerySingleResult(
                "SELECT ad." + column + " \n" +
                        "FROM application ap\n" +
                        "JOIN address ad ON ap.id = ad.application_id \n" +
                        "WHERE ap.number = '" + numberApplication + "' AND ad.type = '" + type + "';");
        String data = addressData.values().iterator().next();
        log.info("Получили данные по адресу (колонка {}): {}", column, data);
        return data;
    }

    @Step("Получили типа адресов из БД для номера заявки: {number}")
    public Set<String> getAddressTypesByApplicationNumber(String number) {
        List<Map<String, String>> addressRows = dbClient.executeQueryMultipleResult(
                "select ad.type  from application ap \n" +
                        "join address ad on ap.id = ad.application_id \n" +
                        "where ap.number = '" + number + "';"
        );
        Set<String> addressTypes = addressRows.stream()
                .map(row -> row.get("type"))
                .collect(toSet());
        log.info("Получи типы адресов: {}", addressTypes);
        return addressTypes;
    }
}

еще есть такой класс мне нужно внести изменения в метод
@Step("Получили типа адресов из БД для номера заявки: {number}")
    public Set<String> getAddressTypesByApplicationNumber(String number) {
        List<Map<String, String>> addressRows = dbClient.executeQueryMultipleResult(
                "select ad.type  from application ap \n" +
                        "join address ad on ap.id = ad.application_id \n" +
                        "where ap.number = '" + number + "';"
        );
        Set<String> addressTypes = addressRows.stream()
                .map(row -> row.get("type"))
                .collect(toSet());
        log.info("Получи типы адресов: {}", addressTypes);
        return addressTypes;
    }

так что бы данные я теперь доставал через DTO а не по запросу sql




public void verifyHomeAndConstantRegistrationAddressTypesSavedInDatabase(@ClientsTypes(userType = MDM) DTOCarLoanClient client) {
        authStep.accountAuth(client);
        newApplicationStep.fillFieldsCorrectlyNewApplication(client);
        generalInformationStep.fillFieldsCorrectlyWithoutClickNext(client, "LADA", "2024");
        dbAsserts.verifyAddressTypesInDatabase(dbSteps.fetchApplicationData(newApplicationPage.getNumberApplication()),
                Set.of("HOME", "CONSTANT_REGISTRATION"), dbSteps.getAddressTypesByApplicationNumber(newApplicationPage.getNumberApplication()));
    }

это тест где я использую метод getAddressTypesByApplicationNumber

